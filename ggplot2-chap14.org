#+PROPERTY: header-args :session *R* :results both

* Chapter 14 -- Build a plot layer by layer

#+begin_src R :session *R*  :results output
library(ggplot2)
options(crayon.enabled = FALSE) # see https://github.com/tidyverse/tibble/issues/395
#+end_src

#+RESULTS:

** 14.3.1  Exercises

1) [@1] The first two arguments to ggplot are data and mapping. The first
   two arguments to all layer functions are mapping and data. Why does
   the order of the arguments differ? (Hint: think about what you set
   most commonly.)

2) [@2] The following code uses dplyr to generate some summary statistics
   about each class of car.

   #+begin_src R :exports both
 library(dplyr)
 class <- mpg %>% 
   group_by(class) %>% 
   summarise(n = n(), hwy = mean(hwy))
   #+end_src
 #> `summarise()` ungrouping output (override with `.groups` argument)

 Use the data to recreate this plot:

#+begin_src R :session *R* :session *R* :session *R* :exports both :results graphics file :file graphics/ggplot2-chap14.3.1.2.png
 ggplot(mpg, aes(class, hwy)) +
     geom_point() +
     geom_jitter(width=0.2) +
     geom_point(data=class, color="red", size=3) +
     geom_text(data=class, aes(class, 10, label=paste0("n=", n)))
#+end_src

 #+RESULTS:
 [[file:graphics/ggplot2-chap14.3.1.2.png]]


 Couple of notes:
 1.  It looks like a different size of black point may have been
    specified in the plot in the exercise.
 2.  The red dots in the exercise may have been specified larger in the
    plot for the exercise.
 3.  The amount of jitter may have been smaller in the
    plot for the exercise, since I appear to have more discrete points
    while some overlap or overplotting may appear in the exercise.
   
** 14.4.3 Exercises

1) [@1] Simplify the following plot specifications:

 a.
#+begin_src R :exports code
 ggplot(mpg) + 
       geom_point(aes(mpg$displ, mpg$hwy))
#+end_src

   Note: The given commands give the following warnings:
#+begin_quote
   1: Use of `mpg$displ` is discouraged. Use `displ` instead. 
   2: Use of `mpg$hwy` is discouraged. Use `hwy` instead. 
#+end_quote

 The following is the simplification:
#+begin_src R :session *R* :session *R* :exports both :results graphics file :file graphics/ggplot2-chap14.4.3.1a.png
   ggplot(mpg, aes(displ, hwy)) +
       geom_point()
 #+end_src

 This gives the same plot as the unsimplified.


 b.

#+begin_src :exports code
    ggplot() + 
      geom_point(mapping = aes(y = hwy, x = cty), data = mpg) +
      geom_smooth(data = mpg, mapping = aes(cty, hwy))
#+end_src

#+begin_src R :session *R* :session *R* :exports both :results graphics file :file graphics/ggplot2-chap14.1.1.1b.png
   ggplot(mpg, aes(cty,hwy)) + geom_point() + geom_smooth() 
#+end_src

 This gives the same plot as the unsimplified.

 c.
#+begin_src R "exports code
 ggplot(diamonds, aes(carat, price)) + 
       geom_point(aes(log(brainwt), log(bodywt)), data = msleep)
#+end_src

 The unsimplified commands above plot the msleep data on log scales,
 but with the diamonds carat and price labels on the axes.

 #+begin_src R :session *R* :exports both :results graphics file :file graphics/ggplot2-chap14.4.3.1c.png
ggplot(msleep, aes(log(brainwt), log(bodywt))) +
       geom_point()
 #+end_src

 #+RESULTS:

2) [@2] What does the following code do? Does it work? Does it make sense? Why/why not?

#+begin_src R :exports code
 ggplot(mpg) +
   geom_point(aes(class, cty)) + 
   geom_boxplot(aes(trans, hwy))
#+end_src

 It overplots the class versus cty point plot with the trans versus hwy
 boxplot.  The result does not make sense, it is confusing.

3. [@3]  What happens if you try to use a continuous variable on the x axis in
 one layer, and a categorical variable in another layer? What happens
 if you do it in the opposite order?

#+begin_src R :exports code
 ggplot(mpg) +
   geom_point(aes(cty, hwy)) + 
   geom_boxplot(aes(trans, hwy))
#+end_src

#+begin_quote
 Error message: Error: Discrete value supplied to continuous scale
#+end_quote

#+begin_src R :session *R* :exports both :results graphics file :file graphics/ggplot2-chap14.4.3.3.png
 ggplot(mpg) +
   geom_boxplot(aes(trans, hwy)) +
   geom_point(aes(cty, hwy))
#+end_src

 It plots but the plot is a mess, and the axes are cramped,
 confused, and messy.


** 14.5.1 Exercises

1) [@1] Download and print out the ggplot2 cheatsheet from
    http://www.rstudio.com/resources/cheatsheets/
    so you have a handy visual reference for all the geoms.

2) [@2] Look at the documentation for the graphical primitive geoms. Which
    aesthetics do they use? How can you summarise them in a compact
    form?

    |                |   |   |       |      |      |       |       |       |        |          |      |       |       |       |      |          |          |        |
    | Primitive      | x | y | label | ymin | ymax | alpha | angle | color | family | fontface | fill | group | shape | width | size | linetype | subgroup | stroke |
    |                |   |   |       | xmin | xmax |       |       |       |        |          |      |       |       |       |      |          |          |        |
    |----------------+---+---+-------+------+------+-------+-------+-------+--------+----------+------+-------+-------+-------+------+----------+----------+--------|
    | ~geom_point~   | Y | Y |       |      |      | Y     |       | Y     |        |          | Y    | Y     | Y     |       | Y    |          |          | Y      |
    | ~geom_path~    | Y | Y |       |      |      | Y     |       | Y     |        |          |      | Y     |       |       | Y    | Y        |          |        |
    | ~geom_ribbon~  | 1 | 1 |       | Y    | Y    | Y     |       | Y     |        |          | Y    | Y     |       |       | Y    | Y        |          |        |
    | ~geom_segment~ | Y | Y |       |      |      | Y     |       | Y     |        |          |      | Y     |       |       | Y    | Y        |          |        |
    | ~geom_rect~    | Y | Y |       |      |      | Y     |       | Y     |        |          | Y    | Y     |       | Y     | Y    | Y        |          |        |
    | ~geom_polygon~ | Y | Y |       |      |      | Y     |       | Y     |        |          | Y    | Y     |       |       | Y    |          | Y        |        |
    | ~geom_text~    | Y | Y | Y     |      |      | Y     | Y     | Y     | Y      | Y        |      | Y     |       |       | Y    |          |          |        |

 Well, this is not as compact as I expected, since there are more
 aesthetics than I expected.

3) [@3] Whatâ€™s the best way to master an unfamiliar geom? List three
    resources to help you get started.

 This is a pretty facile answer:
 - Start with the built-in help file.  Identify the default values, in
   particular the aesthetics, stat, position, and scale associated with
   the geom.
 - Look at the online documentation from the tidyverse, since it has
    more of the same. 
 - Try some of the examples, especially examples which use the mpg
    data set since it is so familiar, and used so often for
    illustrations.
 - Look at the GGPlot2 Cookbook.
 - Look at the R Graph gallery.    
  
4) [@4] For each of the plots below, identify the geom used to draw it.
a. ~geom_violin()~
b. ~geom_point()~ with size as an aesthetic
c. ~geom_hex()~
d. ~geom_point() + geom_jitter()~
e. ~geom_line()~ apparently also with fill
f. ~geom_path()~

5) [@5] For each of the following problems, suggest a useful geom:

a. Display how a variable has changed over time.

 I would use ~geom_line()~, possibly ~geom_path()~

b. Show the detailed distribution of a single variable.

 I would use ~geom_density()~

c. Focus attention on the overall trend in a large dataset.

 I would use ~geom_smooth~ here

d. Draw a map.

    ~geom_polygon~, but you need the shapefile for the map.

e. Label outlying points.

   ~geom_text~ after filtering to identify and isolate the outliers.


** 14.6.2 Exercises
  
1) [@1] The code below creates a similar dataset to ~stat_smooth()~. Use the
    appropriate geoms to mimic the default ~geom_smooth()~ display.
#+begin_src R :exports code 
 mod <- loess(hwy ~ displ, data = mpg)
 smoothed <- data.frame(displ = seq(1.6, 7, length = 50))
 pred <- predict(mod, newdata = smoothed, se = TRUE) 
 smoothed$hwy <- pred$fit
 smoothed$hwy_lwr <- pred$fit - 1.96 * pred$se.fit
 smoothed$hwy_upr <- pred$fit + 1.96 * pred$se.fit
#+end_src

#+RESULTS:
| 34.6272941353221 |
| 33.4214869651694 |
| 32.2985524889682 |
| 31.2708080193814 |
| 30.3395697886327 |
|  29.505021861583 |
| 28.7560774172204 |
| 28.0742371522037 |
| 27.4437219749215 |
|  26.856223165218 |
| 26.2960392322542 |
| 25.7868614256285 |
| 25.3524546187736 |
| 24.9516807688588 |
| 24.5104835459396 |
| 24.0541543292442 |
| 23.6124916966101 |
| 23.1982601048138 |
| 22.8117352066022 |
|  22.434496431959 |
| 22.0345773691914 |
|   21.57724155367 |
| 21.0398250893101 |
| 20.4616405364287 |
|   19.89584826192 |
| 19.3850550017212 |
| 18.9582525682858 |
| 18.6354978822179 |
| 18.4050090956711 |
| 18.2124263685643 |
| 18.0654034064793 |
| 17.9722840120521 |
| 17.9392031690753 |
|  17.970775466312 |
| 18.0709351448309 |
| 18.2376610007253 |
| 18.4735641514328 |
|  18.782436067071 |
| 19.1670670426038 |
| 19.6289557984185 |
| 20.1684409781607 |
| 20.7850564874941 |
| 21.4778981841534 |
| 22.2458929364949 |
|  23.087956825265 |
|  24.003071353243 |
| 24.9903108329524 |
| 26.0488449360435 |
| 27.1779305628576 |
| 28.3769003724354 |

 #+begin_src R :session *R* :exports both :results graphics file :file graphics/ggplot2-chap14.6.2.1.png
   mod <- loess(hwy ~ displ, data = mpg)
   smoothed <- data.frame(displ = seq(1.6, 7, length = 50))
   pred <- predict(mod, newdata = smoothed, se = TRUE) 
   smoothed$hwy <- pred$fit
   smoothed$hwy_lwr <- pred$fit - 1.96 * pred$se.fit
   smoothed$hwy_upr <- pred$fit + 1.96 * pred$se.fit
   ggplot(mpg, aes(displ, hwy)) + geom_smooth() +
       geom_smooth(aes(displ, hwy_upr), color="green", data=smoothed) +
       geom_smooth(aes(displ, hwy_lwr), color="green", data=smoothed)
 #+end_src

 #+RESULTS:
 [[file:graphics/ggplot2-chap14.6.2.1.png]]


2) [@2]    What stats were used to create the following plots?

   a.  This looks like ~stat_ecdf()~ used with either ~geom_line()~

 #+begin_src R :session *R* :exports both :results graphics file :file graphics/ggplot2-chap14.6.2.2.png
   ggplot(mpg, aes(displ, hwy)) +
       geom_line(stat="ecdf")
 #+end_src

 #+RESULTS:
 [[file:graphics/ggplot2-chap14.6.2.2.png]]

    This is more stretched out than the scrunched up sample.

   b.  This looks like a quantile stat used with ~geom_point()~.

   c.  This looks like a function plot for the recentered and scaled
       normal density compared to the data density.

3) [@3]    Read the help for ~stat_sum()~ then use ~geom_count()~ to create a
    plot that shows the proportion of cars that have each combination
    of drv and trans.

    TO DO

** 14.7.1 Exercises

1) [@1]    When might you use ~position_nudge()~? Read the documentation.

    From the help file:
         ~position_nudge()~ is generally useful for adjusting the position
      of items on discrete scales by a small amount. Nudging is built in
      to ~geom_text()~ because it's so useful for moving labels a small
      distance from what they're labelling.

#+begin_src R :session *R* :exports both :results graphics file :file graphics/ggplot2-chap14.7.1.1.png
 df <- data.frame(
	x = c(1,3,2,5),
	y = c("a","c","d","c")
      )
 ggplot(df, aes(x, y)) +
	geom_point() +
geom_text(aes(label = y), position = position_nudge(y = -0.1))
#+end_src

#+RESULTS:
[[file:graphics/ggplot2-chap14.7.1.1.png]]

2) [@2] Many position adjustments can only be used with a few geoms. For
    example, you canâ€™t stack boxplots or errors bars. Why not? What
    properties must a geom possess in order to be stackable? What
    properties must it possess to be dodgeable?

    I would say that you can't you canâ€™t stack boxplots or errors bars
    because they indicate a density or a distribution of values for a
    category.  Stacking a distribution for more than one category doesn't
    make much sense.

3) [@3] Why might you use ~geom_jitter()~ instead of ~geom_count()~? What
    are the advantages and disadvantages of each technique?

    This is a variant of ~geom_point()~ that counts the number of
    observations at each location, then maps the count to point area.
    It useful when you have discrete data and overplotting.  I would
    want this when I want more precise information.  On the other hand,
    using ~geom_jitter()~ gives a more impressionistic sense of the
   data.

4) [@4] When might you use a stacked area plot? What are the advantages
    and disadvantages compared to a line plot?

#+begin_src R :session *R* :exports both :results graphics file :file graphics/ggplot2-chap14.7.1.4a.png
      ggplot(diamonds, aes(color, fill = cut)) + 
         geom_bar(position = "identity", alpha = 1 / 2, colour = "grey50") +
            xlab(NULL) + ylab(NULL) + theme(legend.position = "none")
#+end_src

#+RESULTS:
[[file:graphics/ggplot2-chap14.7.1.4a.png]]

 #+begin_src R :session *R* :exports both :results graphics file :file graphics/ggplot2-chap14.7.1.4b.png
      ggplot(diamonds, aes(color, colour = cut)) + 
	geom_line(aes(group = cut), stat = "count") + 
	xlab(NULL) + ylab(NULL) + 
	theme(legend.position = "none")
#+end_src

#+RESULTS:
[[file:graphics/ggplot2-chap14.7.1.4b.png]]

 I think the stacked obscures a lot of information, even with the
 transparency. However the filled areas give an impression of the
 relative numbers better than the line plots, which seem to be meager
 on information, even though it is the same thing.
